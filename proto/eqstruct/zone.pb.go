// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v4.25.2
// source: proto/eqstruct/zone.proto

package eqstruct

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ZoneServerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip   string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Port uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *ZoneServerInfo) Reset() {
	*x = ZoneServerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_eqstruct_zone_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZoneServerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZoneServerInfo) ProtoMessage() {}

func (x *ZoneServerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_eqstruct_zone_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZoneServerInfo.ProtoReflect.Descriptor instead.
func (*ZoneServerInfo) Descriptor() ([]byte, []int) {
	return file_proto_eqstruct_zone_proto_rawDescGZIP(), []int{0}
}

func (x *ZoneServerInfo) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *ZoneServerInfo) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type NewZone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	NameShort            string  `protobuf:"bytes,2,opt,name=name_short,json=nameShort,proto3" json:"name_short,omitempty"`
	NameLong             string  `protobuf:"bytes,3,opt,name=name_long,json=nameLong,proto3" json:"name_long,omitempty"`
	Type                 uint32  `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`
	FogRed               uint32  `protobuf:"varint,5,opt,name=fog_red,json=fogRed,proto3" json:"fog_red,omitempty"`
	FogGreen             uint32  `protobuf:"varint,6,opt,name=fog_green,json=fogGreen,proto3" json:"fog_green,omitempty"`
	FogBlue              uint32  `protobuf:"varint,7,opt,name=fog_blue,json=fogBlue,proto3" json:"fog_blue,omitempty"`
	FogMinClip           float32 `protobuf:"fixed32,8,opt,name=fog_min_clip,json=fogMinClip,proto3" json:"fog_min_clip,omitempty"`
	FogMaxClip           float32 `protobuf:"fixed32,9,opt,name=fog_max_clip,json=fogMaxClip,proto3" json:"fog_max_clip,omitempty"`
	Gravity              float32 `protobuf:"fixed32,10,opt,name=gravity,proto3" json:"gravity,omitempty"`
	TimeType             uint32  `protobuf:"varint,11,opt,name=time_type,json=timeType,proto3" json:"time_type,omitempty"`
	RainChance           uint32  `protobuf:"varint,12,opt,name=rain_chance,json=rainChance,proto3" json:"rain_chance,omitempty"`
	RainDuration         uint32  `protobuf:"varint,13,opt,name=rain_duration,json=rainDuration,proto3" json:"rain_duration,omitempty"`
	SnowChance           uint32  `protobuf:"varint,14,opt,name=snow_chance,json=snowChance,proto3" json:"snow_chance,omitempty"`
	SnowDuration         uint32  `protobuf:"varint,15,opt,name=snow_duration,json=snowDuration,proto3" json:"snow_duration,omitempty"`
	SpecialDates         []byte  `protobuf:"bytes,16,opt,name=special_dates,json=specialDates,proto3" json:"special_dates,omitempty"`
	SpecialCodes         []byte  `protobuf:"bytes,17,opt,name=special_codes,json=specialCodes,proto3" json:"special_codes,omitempty"`
	TimeZone             uint32  `protobuf:"varint,18,opt,name=time_zone,json=timeZone,proto3" json:"time_zone,omitempty"`
	Sky                  uint32  `protobuf:"varint,19,opt,name=sky,proto3" json:"sky,omitempty"`
	WaterMusic           int32   `protobuf:"varint,20,opt,name=water_music,json=waterMusic,proto3" json:"water_music,omitempty"`
	MusicNormalDay       int32   `protobuf:"varint,21,opt,name=music_normal_day,json=musicNormalDay,proto3" json:"music_normal_day,omitempty"`
	MusicNormalNight     int32   `protobuf:"varint,22,opt,name=music_normal_night,json=musicNormalNight,proto3" json:"music_normal_night,omitempty"`
	ZoneExpMultiplier    float32 `protobuf:"fixed32,23,opt,name=zone_exp_multiplier,json=zoneExpMultiplier,proto3" json:"zone_exp_multiplier,omitempty"`
	SafeX                float32 `protobuf:"fixed32,24,opt,name=safe_x,json=safeX,proto3" json:"safe_x,omitempty"`
	SafeY                float32 `protobuf:"fixed32,25,opt,name=safe_y,json=safeY,proto3" json:"safe_y,omitempty"`
	SafeZ                float32 `protobuf:"fixed32,26,opt,name=safe_z,json=safeZ,proto3" json:"safe_z,omitempty"`
	MaxZ                 float32 `protobuf:"fixed32,27,opt,name=max_z,json=maxZ,proto3" json:"max_z,omitempty"`
	Underworld           float32 `protobuf:"fixed32,28,opt,name=underworld,proto3" json:"underworld,omitempty"`
	ClipMin              float32 `protobuf:"fixed32,29,opt,name=clip_min,json=clipMin,proto3" json:"clip_min,omitempty"`
	ClipMax              float32 `protobuf:"fixed32,30,opt,name=clip_max,json=clipMax,proto3" json:"clip_max,omitempty"`
	ForageNovice         uint32  `protobuf:"varint,31,opt,name=forage_novice,json=forageNovice,proto3" json:"forage_novice,omitempty"`
	ForageMedium         uint32  `protobuf:"varint,32,opt,name=forage_medium,json=forageMedium,proto3" json:"forage_medium,omitempty"`
	ForageAdvance        uint32  `protobuf:"varint,33,opt,name=forage_advance,json=forageAdvance,proto3" json:"forage_advance,omitempty"`
	FishingNovice        uint32  `protobuf:"varint,34,opt,name=fishing_novice,json=fishingNovice,proto3" json:"fishing_novice,omitempty"`
	FishingMedium        uint32  `protobuf:"varint,35,opt,name=fishing_medium,json=fishingMedium,proto3" json:"fishing_medium,omitempty"`
	FishingAdvance       uint32  `protobuf:"varint,36,opt,name=fishing_advance,json=fishingAdvance,proto3" json:"fishing_advance,omitempty"`
	SkyLock              uint32  `protobuf:"varint,37,opt,name=sky_lock,json=skyLock,proto3" json:"sky_lock,omitempty"`
	GraveyardTime        uint32  `protobuf:"varint,38,opt,name=graveyard_time,json=graveyardTime,proto3" json:"graveyard_time,omitempty"`
	ScriptPeriodicHour   uint32  `protobuf:"varint,39,opt,name=script_periodic_hour,json=scriptPeriodicHour,proto3" json:"script_periodic_hour,omitempty"`
	ScriptPeriodicMin    uint32  `protobuf:"varint,40,opt,name=script_periodic_min,json=scriptPeriodicMin,proto3" json:"script_periodic_min,omitempty"`
	ScriptPeriodicFast   uint32  `protobuf:"varint,41,opt,name=script_periodic_fast,json=scriptPeriodicFast,proto3" json:"script_periodic_fast,omitempty"`
	ScriptPlayerDead     uint32  `protobuf:"varint,42,opt,name=script_player_dead,json=scriptPlayerDead,proto3" json:"script_player_dead,omitempty"`
	ScriptNpcDead        uint32  `protobuf:"varint,43,opt,name=script_npc_dead,json=scriptNpcDead,proto3" json:"script_npc_dead,omitempty"`
	ScriptPlayerEntering uint32  `protobuf:"varint,44,opt,name=script_player_entering,json=scriptPlayerEntering,proto3" json:"script_player_entering,omitempty"`
}

func (x *NewZone) Reset() {
	*x = NewZone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_eqstruct_zone_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewZone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewZone) ProtoMessage() {}

func (x *NewZone) ProtoReflect() protoreflect.Message {
	mi := &file_proto_eqstruct_zone_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewZone.ProtoReflect.Descriptor instead.
func (*NewZone) Descriptor() ([]byte, []int) {
	return file_proto_eqstruct_zone_proto_rawDescGZIP(), []int{1}
}

func (x *NewZone) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NewZone) GetNameShort() string {
	if x != nil {
		return x.NameShort
	}
	return ""
}

func (x *NewZone) GetNameLong() string {
	if x != nil {
		return x.NameLong
	}
	return ""
}

func (x *NewZone) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *NewZone) GetFogRed() uint32 {
	if x != nil {
		return x.FogRed
	}
	return 0
}

func (x *NewZone) GetFogGreen() uint32 {
	if x != nil {
		return x.FogGreen
	}
	return 0
}

func (x *NewZone) GetFogBlue() uint32 {
	if x != nil {
		return x.FogBlue
	}
	return 0
}

func (x *NewZone) GetFogMinClip() float32 {
	if x != nil {
		return x.FogMinClip
	}
	return 0
}

func (x *NewZone) GetFogMaxClip() float32 {
	if x != nil {
		return x.FogMaxClip
	}
	return 0
}

func (x *NewZone) GetGravity() float32 {
	if x != nil {
		return x.Gravity
	}
	return 0
}

func (x *NewZone) GetTimeType() uint32 {
	if x != nil {
		return x.TimeType
	}
	return 0
}

func (x *NewZone) GetRainChance() uint32 {
	if x != nil {
		return x.RainChance
	}
	return 0
}

func (x *NewZone) GetRainDuration() uint32 {
	if x != nil {
		return x.RainDuration
	}
	return 0
}

func (x *NewZone) GetSnowChance() uint32 {
	if x != nil {
		return x.SnowChance
	}
	return 0
}

func (x *NewZone) GetSnowDuration() uint32 {
	if x != nil {
		return x.SnowDuration
	}
	return 0
}

func (x *NewZone) GetSpecialDates() []byte {
	if x != nil {
		return x.SpecialDates
	}
	return nil
}

func (x *NewZone) GetSpecialCodes() []byte {
	if x != nil {
		return x.SpecialCodes
	}
	return nil
}

func (x *NewZone) GetTimeZone() uint32 {
	if x != nil {
		return x.TimeZone
	}
	return 0
}

func (x *NewZone) GetSky() uint32 {
	if x != nil {
		return x.Sky
	}
	return 0
}

func (x *NewZone) GetWaterMusic() int32 {
	if x != nil {
		return x.WaterMusic
	}
	return 0
}

func (x *NewZone) GetMusicNormalDay() int32 {
	if x != nil {
		return x.MusicNormalDay
	}
	return 0
}

func (x *NewZone) GetMusicNormalNight() int32 {
	if x != nil {
		return x.MusicNormalNight
	}
	return 0
}

func (x *NewZone) GetZoneExpMultiplier() float32 {
	if x != nil {
		return x.ZoneExpMultiplier
	}
	return 0
}

func (x *NewZone) GetSafeX() float32 {
	if x != nil {
		return x.SafeX
	}
	return 0
}

func (x *NewZone) GetSafeY() float32 {
	if x != nil {
		return x.SafeY
	}
	return 0
}

func (x *NewZone) GetSafeZ() float32 {
	if x != nil {
		return x.SafeZ
	}
	return 0
}

func (x *NewZone) GetMaxZ() float32 {
	if x != nil {
		return x.MaxZ
	}
	return 0
}

func (x *NewZone) GetUnderworld() float32 {
	if x != nil {
		return x.Underworld
	}
	return 0
}

func (x *NewZone) GetClipMin() float32 {
	if x != nil {
		return x.ClipMin
	}
	return 0
}

func (x *NewZone) GetClipMax() float32 {
	if x != nil {
		return x.ClipMax
	}
	return 0
}

func (x *NewZone) GetForageNovice() uint32 {
	if x != nil {
		return x.ForageNovice
	}
	return 0
}

func (x *NewZone) GetForageMedium() uint32 {
	if x != nil {
		return x.ForageMedium
	}
	return 0
}

func (x *NewZone) GetForageAdvance() uint32 {
	if x != nil {
		return x.ForageAdvance
	}
	return 0
}

func (x *NewZone) GetFishingNovice() uint32 {
	if x != nil {
		return x.FishingNovice
	}
	return 0
}

func (x *NewZone) GetFishingMedium() uint32 {
	if x != nil {
		return x.FishingMedium
	}
	return 0
}

func (x *NewZone) GetFishingAdvance() uint32 {
	if x != nil {
		return x.FishingAdvance
	}
	return 0
}

func (x *NewZone) GetSkyLock() uint32 {
	if x != nil {
		return x.SkyLock
	}
	return 0
}

func (x *NewZone) GetGraveyardTime() uint32 {
	if x != nil {
		return x.GraveyardTime
	}
	return 0
}

func (x *NewZone) GetScriptPeriodicHour() uint32 {
	if x != nil {
		return x.ScriptPeriodicHour
	}
	return 0
}

func (x *NewZone) GetScriptPeriodicMin() uint32 {
	if x != nil {
		return x.ScriptPeriodicMin
	}
	return 0
}

func (x *NewZone) GetScriptPeriodicFast() uint32 {
	if x != nil {
		return x.ScriptPeriodicFast
	}
	return 0
}

func (x *NewZone) GetScriptPlayerDead() uint32 {
	if x != nil {
		return x.ScriptPlayerDead
	}
	return 0
}

func (x *NewZone) GetScriptNpcDead() uint32 {
	if x != nil {
		return x.ScriptNpcDead
	}
	return 0
}

func (x *NewZone) GetScriptPlayerEntering() uint32 {
	if x != nil {
		return x.ScriptPlayerEntering
	}
	return 0
}

type ZoneEntryServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       uint32  `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Name       string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ZoneId     uint32  `protobuf:"varint,3,opt,name=zone_id,json=zoneId,proto3" json:"zone_id,omitempty"`
	PosY       float32 `protobuf:"fixed32,4,opt,name=pos_y,json=posY,proto3" json:"pos_y,omitempty"`
	PosX       float32 `protobuf:"fixed32,5,opt,name=pos_x,json=posX,proto3" json:"pos_x,omitempty"`
	PosZ       float32 `protobuf:"fixed32,6,opt,name=pos_z,json=posZ,proto3" json:"pos_z,omitempty"`
	Heading    float32 `protobuf:"fixed32,7,opt,name=heading,proto3" json:"heading,omitempty"`
	MyChar     int32   `protobuf:"varint,8,opt,name=my_char,json=myChar,proto3" json:"my_char,omitempty"`
	HpMax      uint32  `protobuf:"varint,9,opt,name=hp_max,json=hpMax,proto3" json:"hp_max,omitempty"`
	HpCur      uint32  `protobuf:"varint,10,opt,name=hp_cur,json=hpCur,proto3" json:"hp_cur,omitempty"`
	GuildId    int32   `protobuf:"varint,11,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	Class      uint32  `protobuf:"varint,12,opt,name=class,proto3" json:"class,omitempty"`
	Race       uint32  `protobuf:"varint,13,opt,name=race,proto3" json:"race,omitempty"`
	Gender     uint32  `protobuf:"varint,14,opt,name=gender,proto3" json:"gender,omitempty"`
	Level      uint32  `protobuf:"varint,15,opt,name=level,proto3" json:"level,omitempty"`
	Invis      uint32  `protobuf:"varint,16,opt,name=invis,proto3" json:"invis,omitempty"`
	Sneaking   uint32  `protobuf:"varint,17,opt,name=sneaking,proto3" json:"sneaking,omitempty"`
	Pvp        uint32  `protobuf:"varint,18,opt,name=pvp,proto3" json:"pvp,omitempty"`
	Checksum   []byte  `protobuf:"bytes,19,opt,name=checksum,proto3" json:"checksum,omitempty"`
	Unknown_70 []byte  `protobuf:"bytes,20,opt,name=unknown_70,json=unknown70,proto3" json:"unknown_70,omitempty"`
}

func (x *ZoneEntryServer) Reset() {
	*x = ZoneEntryServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_eqstruct_zone_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZoneEntryServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZoneEntryServer) ProtoMessage() {}

func (x *ZoneEntryServer) ProtoReflect() protoreflect.Message {
	mi := &file_proto_eqstruct_zone_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZoneEntryServer.ProtoReflect.Descriptor instead.
func (*ZoneEntryServer) Descriptor() ([]byte, []int) {
	return file_proto_eqstruct_zone_proto_rawDescGZIP(), []int{2}
}

func (x *ZoneEntryServer) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ZoneEntryServer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ZoneEntryServer) GetZoneId() uint32 {
	if x != nil {
		return x.ZoneId
	}
	return 0
}

func (x *ZoneEntryServer) GetPosY() float32 {
	if x != nil {
		return x.PosY
	}
	return 0
}

func (x *ZoneEntryServer) GetPosX() float32 {
	if x != nil {
		return x.PosX
	}
	return 0
}

func (x *ZoneEntryServer) GetPosZ() float32 {
	if x != nil {
		return x.PosZ
	}
	return 0
}

func (x *ZoneEntryServer) GetHeading() float32 {
	if x != nil {
		return x.Heading
	}
	return 0
}

func (x *ZoneEntryServer) GetMyChar() int32 {
	if x != nil {
		return x.MyChar
	}
	return 0
}

func (x *ZoneEntryServer) GetHpMax() uint32 {
	if x != nil {
		return x.HpMax
	}
	return 0
}

func (x *ZoneEntryServer) GetHpCur() uint32 {
	if x != nil {
		return x.HpCur
	}
	return 0
}

func (x *ZoneEntryServer) GetGuildId() int32 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

func (x *ZoneEntryServer) GetClass() uint32 {
	if x != nil {
		return x.Class
	}
	return 0
}

func (x *ZoneEntryServer) GetRace() uint32 {
	if x != nil {
		return x.Race
	}
	return 0
}

func (x *ZoneEntryServer) GetGender() uint32 {
	if x != nil {
		return x.Gender
	}
	return 0
}

func (x *ZoneEntryServer) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *ZoneEntryServer) GetInvis() uint32 {
	if x != nil {
		return x.Invis
	}
	return 0
}

func (x *ZoneEntryServer) GetSneaking() uint32 {
	if x != nil {
		return x.Sneaking
	}
	return 0
}

func (x *ZoneEntryServer) GetPvp() uint32 {
	if x != nil {
		return x.Pvp
	}
	return 0
}

func (x *ZoneEntryServer) GetChecksum() []byte {
	if x != nil {
		return x.Checksum
	}
	return nil
}

func (x *ZoneEntryServer) GetUnknown_70() []byte {
	if x != nil {
		return x.Unknown_70
	}
	return nil
}

type ZoneEntryClient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Unknown_000 uint32 `protobuf:"varint,1,opt,name=unknown_000,json=unknown000,proto3" json:"unknown_000,omitempty"`
	CharName    string `protobuf:"bytes,2,opt,name=char_name,json=charName,proto3" json:"char_name,omitempty"`
}

func (x *ZoneEntryClient) Reset() {
	*x = ZoneEntryClient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_eqstruct_zone_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZoneEntryClient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZoneEntryClient) ProtoMessage() {}

func (x *ZoneEntryClient) ProtoReflect() protoreflect.Message {
	mi := &file_proto_eqstruct_zone_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZoneEntryClient.ProtoReflect.Descriptor instead.
func (*ZoneEntryClient) Descriptor() ([]byte, []int) {
	return file_proto_eqstruct_zone_proto_rawDescGZIP(), []int{3}
}

func (x *ZoneEntryClient) GetUnknown_000() uint32 {
	if x != nil {
		return x.Unknown_000
	}
	return 0
}

func (x *ZoneEntryClient) GetCharName() string {
	if x != nil {
		return x.CharName
	}
	return ""
}

type ZonePoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ZonePoints []*ZonePoint `protobuf:"bytes,1,rep,name=zone_points,json=zonePoints,proto3" json:"zone_points,omitempty"`
}

func (x *ZonePoints) Reset() {
	*x = ZonePoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_eqstruct_zone_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZonePoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZonePoints) ProtoMessage() {}

func (x *ZonePoints) ProtoReflect() protoreflect.Message {
	mi := &file_proto_eqstruct_zone_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZonePoints.ProtoReflect.Descriptor instead.
func (*ZonePoints) Descriptor() ([]byte, []int) {
	return file_proto_eqstruct_zone_proto_rawDescGZIP(), []int{4}
}

func (x *ZonePoints) GetZonePoints() []*ZonePoint {
	if x != nil {
		return x.ZonePoints
	}
	return nil
}

type ZonePoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Iterator uint32  `protobuf:"varint,1,opt,name=iterator,proto3" json:"iterator,omitempty"`
	X        float32 `protobuf:"fixed32,2,opt,name=x,proto3" json:"x,omitempty"`
	Y        float32 `protobuf:"fixed32,3,opt,name=y,proto3" json:"y,omitempty"`
	Z        float32 `protobuf:"fixed32,4,opt,name=z,proto3" json:"z,omitempty"`
	Heading  float32 `protobuf:"fixed32,5,opt,name=heading,proto3" json:"heading,omitempty"`
	ZoneId   uint32  `protobuf:"varint,6,opt,name=zone_id,json=zoneId,proto3" json:"zone_id,omitempty"`
}

func (x *ZonePoint) Reset() {
	*x = ZonePoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_eqstruct_zone_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZonePoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZonePoint) ProtoMessage() {}

func (x *ZonePoint) ProtoReflect() protoreflect.Message {
	mi := &file_proto_eqstruct_zone_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZonePoint.ProtoReflect.Descriptor instead.
func (*ZonePoint) Descriptor() ([]byte, []int) {
	return file_proto_eqstruct_zone_proto_rawDescGZIP(), []int{5}
}

func (x *ZonePoint) GetIterator() uint32 {
	if x != nil {
		return x.Iterator
	}
	return 0
}

func (x *ZonePoint) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *ZonePoint) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *ZonePoint) GetZ() float32 {
	if x != nil {
		return x.Z
	}
	return 0
}

func (x *ZonePoint) GetHeading() float32 {
	if x != nil {
		return x.Heading
	}
	return 0
}

func (x *ZonePoint) GetZoneId() uint32 {
	if x != nil {
		return x.ZoneId
	}
	return 0
}

type Weather struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      uint32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Intensity uint32 `protobuf:"varint,2,opt,name=intensity,proto3" json:"intensity,omitempty"`
}

func (x *Weather) Reset() {
	*x = Weather{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_eqstruct_zone_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Weather) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Weather) ProtoMessage() {}

func (x *Weather) ProtoReflect() protoreflect.Message {
	mi := &file_proto_eqstruct_zone_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Weather.ProtoReflect.Descriptor instead.
func (*Weather) Descriptor() ([]byte, []int) {
	return file_proto_eqstruct_zone_proto_rawDescGZIP(), []int{6}
}

func (x *Weather) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Weather) GetIntensity() uint32 {
	if x != nil {
		return x.Intensity
	}
	return 0
}

type Time struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hour   uint32 `protobuf:"varint,1,opt,name=hour,proto3" json:"hour,omitempty"`
	Minute uint32 `protobuf:"varint,2,opt,name=minute,proto3" json:"minute,omitempty"`
	Day    uint32 `protobuf:"varint,3,opt,name=day,proto3" json:"day,omitempty"`
	Month  uint32 `protobuf:"varint,4,opt,name=month,proto3" json:"month,omitempty"`
	Year   uint32 `protobuf:"varint,5,opt,name=year,proto3" json:"year,omitempty"`
}

func (x *Time) Reset() {
	*x = Time{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_eqstruct_zone_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Time) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Time) ProtoMessage() {}

func (x *Time) ProtoReflect() protoreflect.Message {
	mi := &file_proto_eqstruct_zone_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Time.ProtoReflect.Descriptor instead.
func (*Time) Descriptor() ([]byte, []int) {
	return file_proto_eqstruct_zone_proto_rawDescGZIP(), []int{7}
}

func (x *Time) GetHour() uint32 {
	if x != nil {
		return x.Hour
	}
	return 0
}

func (x *Time) GetMinute() uint32 {
	if x != nil {
		return x.Minute
	}
	return 0
}

func (x *Time) GetDay() uint32 {
	if x != nil {
		return x.Day
	}
	return 0
}

func (x *Time) GetMonth() uint32 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *Time) GetYear() uint32 {
	if x != nil {
		return x.Year
	}
	return 0
}

var File_proto_eqstruct_zone_proto protoreflect.FileDescriptor

var file_proto_eqstruct_zone_proto_rawDesc = []byte{
	0x0a, 0x19, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x71, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x2f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x65, 0x71, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x34, 0x0a, 0x0e, 0x5a, 0x6f, 0x6e, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0xe1, 0x0b, 0x0a, 0x07,
	0x4e, 0x65, 0x77, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6e,
	0x61, 0x6d, 0x65, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e,
	0x61, 0x6d, 0x65, 0x4c, 0x6f, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x66,
	0x6f, 0x67, 0x5f, 0x72, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x66, 0x6f,
	0x67, 0x52, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6f, 0x67, 0x5f, 0x67, 0x72, 0x65, 0x65,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x6f, 0x67, 0x47, 0x72, 0x65, 0x65,
	0x6e, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x6f, 0x67, 0x5f, 0x62, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x66, 0x6f, 0x67, 0x42, 0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0c,
	0x66, 0x6f, 0x67, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x6c, 0x69, 0x70, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0a, 0x66, 0x6f, 0x67, 0x4d, 0x69, 0x6e, 0x43, 0x6c, 0x69, 0x70, 0x12, 0x20,
	0x0a, 0x0c, 0x66, 0x6f, 0x67, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6c, 0x69, 0x70, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x66, 0x6f, 0x67, 0x4d, 0x61, 0x78, 0x43, 0x6c, 0x69, 0x70,
	0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x07, 0x67, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74,
	0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x61, 0x69, 0x6e, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x61,
	0x69, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x61, 0x69, 0x6e,
	0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x72, 0x61, 0x69, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x6e, 0x6f, 0x77, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x73, 0x6e, 0x6f, 0x77, 0x43, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x6e, 0x6f, 0x77, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x6e, 0x6f, 0x77, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0c, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x6b,
	0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x73, 0x6b, 0x79, 0x12, 0x1f, 0x0a, 0x0b,
	0x77, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x77, 0x61, 0x74, 0x65, 0x72, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x12, 0x28, 0x0a,
	0x10, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x64, 0x61,
	0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x4e, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x44, 0x61, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x75, 0x73, 0x69, 0x63,
	0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x10, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x4e, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x65, 0x78,
	0x70, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x11, 0x7a, 0x6f, 0x6e, 0x65, 0x45, 0x78, 0x70, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x61, 0x66, 0x65, 0x5f, 0x78, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x61, 0x66, 0x65, 0x58, 0x12, 0x15, 0x0a, 0x06,
	0x73, 0x61, 0x66, 0x65, 0x5f, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x61,
	0x66, 0x65, 0x59, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x61, 0x66, 0x65, 0x5f, 0x7a, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x61, 0x66, 0x65, 0x5a, 0x12, 0x13, 0x0a, 0x05, 0x6d, 0x61,
	0x78, 0x5f, 0x7a, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x6d, 0x61, 0x78, 0x5a, 0x12,
	0x1e, 0x0a, 0x0a, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0a, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x70, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x07, 0x63, 0x6c, 0x69, 0x70, 0x4d, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6c,
	0x69, 0x70, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x63, 0x6c,
	0x69, 0x70, 0x4d, 0x61, 0x78, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f,
	0x6e, 0x6f, 0x76, 0x69, 0x63, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x66, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x76, 0x69, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x66, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x12,
	0x25, 0x0a, 0x0e, 0x66, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x66, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41,
	0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x69, 0x73, 0x68, 0x69, 0x6e,
	0x67, 0x5f, 0x6e, 0x6f, 0x76, 0x69, 0x63, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x66, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x76, 0x69, 0x63, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x66, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x66, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x4d, 0x65,
	0x64, 0x69, 0x75, 0x6d, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x5f,
	0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x66,
	0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x73, 0x6b, 0x79, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x73, 0x6b, 0x79, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x25, 0x0a, 0x0e, 0x67, 0x72, 0x61, 0x76,
	0x65, 0x79, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x67, 0x72, 0x61, 0x76, 0x65, 0x79, 0x61, 0x72, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x30, 0x0a, 0x14, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x69, 0x63, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x48, 0x6f, 0x75,
	0x72, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x69, 0x63, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x4d, 0x69,
	0x6e, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x69, 0x63, 0x5f, 0x66, 0x61, 0x73, 0x74, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x12, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x46,
	0x61, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x10, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x65, 0x61,
	0x64, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x6e, 0x70, 0x63, 0x5f,
	0x64, 0x65, 0x61, 0x64, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x4e, 0x70, 0x63, 0x44, 0x65, 0x61, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x69, 0x6e, 0x67, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x22,
	0xe4, 0x03, 0x0a, 0x0f, 0x5a, 0x6f, 0x6e, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x7a,
	0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x7a, 0x6f,
	0x6e, 0x65, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x70, 0x6f, 0x73, 0x5f, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x04, 0x70, 0x6f, 0x73, 0x59, 0x12, 0x13, 0x0a, 0x05, 0x70, 0x6f, 0x73,
	0x5f, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x70, 0x6f, 0x73, 0x58, 0x12, 0x13,
	0x0a, 0x05, 0x70, 0x6f, 0x73, 0x5f, 0x7a, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x70,
	0x6f, 0x73, 0x5a, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x17, 0x0a,
	0x07, 0x6d, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x6d, 0x79, 0x43, 0x68, 0x61, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x68, 0x70, 0x5f, 0x6d, 0x61, 0x78,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x68, 0x70, 0x4d, 0x61, 0x78, 0x12, 0x15, 0x0a,
	0x06, 0x68, 0x70, 0x5f, 0x63, 0x75, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x68,
	0x70, 0x43, 0x75, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x63, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x72, 0x61, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x76, 0x69, 0x73,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x76, 0x69, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x6e, 0x65, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x73, 0x6e, 0x65, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x76, 0x70,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70, 0x76, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x5f, 0x37, 0x30, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x37, 0x30, 0x22, 0x4f, 0x0a, 0x0f, 0x5a, 0x6f, 0x6e, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x30, 0x30, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x30, 0x30, 0x30, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x68,
	0x61, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x68, 0x61, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x42, 0x0a, 0x0a, 0x5a, 0x6f, 0x6e, 0x65, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x0b, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x71, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x5a, 0x6f, 0x6e, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52,
	0x0a, 0x7a, 0x6f, 0x6e, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x09,
	0x5a, 0x6f, 0x6e, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x74, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x74, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01,
	0x79, 0x12, 0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x7a, 0x12,
	0x18, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x7a, 0x6f, 0x6e,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x7a, 0x6f, 0x6e, 0x65,
	0x49, 0x64, 0x22, 0x3b, 0x0a, 0x07, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x22,
	0x6e, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6d,
	0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x69, 0x6e,
	0x75, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x64, 0x61, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x79,
	0x65, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x42,
	0x36, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6e, 0x6f,
	0x6d, 0x6f, 0x72, 0x65, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x7a, 0x2f, 0x67, 0x68, 0x6f, 0x65,
	0x71, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65,
	0x71, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_eqstruct_zone_proto_rawDescOnce sync.Once
	file_proto_eqstruct_zone_proto_rawDescData = file_proto_eqstruct_zone_proto_rawDesc
)

func file_proto_eqstruct_zone_proto_rawDescGZIP() []byte {
	file_proto_eqstruct_zone_proto_rawDescOnce.Do(func() {
		file_proto_eqstruct_zone_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_eqstruct_zone_proto_rawDescData)
	})
	return file_proto_eqstruct_zone_proto_rawDescData
}

var file_proto_eqstruct_zone_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_proto_eqstruct_zone_proto_goTypes = []interface{}{
	(*ZoneServerInfo)(nil),  // 0: eqstruct.ZoneServerInfo
	(*NewZone)(nil),         // 1: eqstruct.NewZone
	(*ZoneEntryServer)(nil), // 2: eqstruct.ZoneEntryServer
	(*ZoneEntryClient)(nil), // 3: eqstruct.ZoneEntryClient
	(*ZonePoints)(nil),      // 4: eqstruct.ZonePoints
	(*ZonePoint)(nil),       // 5: eqstruct.ZonePoint
	(*Weather)(nil),         // 6: eqstruct.Weather
	(*Time)(nil),            // 7: eqstruct.Time
}
var file_proto_eqstruct_zone_proto_depIdxs = []int32{
	5, // 0: eqstruct.ZonePoints.zone_points:type_name -> eqstruct.ZonePoint
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_proto_eqstruct_zone_proto_init() }
func file_proto_eqstruct_zone_proto_init() {
	if File_proto_eqstruct_zone_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_eqstruct_zone_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZoneServerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_eqstruct_zone_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewZone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_eqstruct_zone_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZoneEntryServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_eqstruct_zone_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZoneEntryClient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_eqstruct_zone_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZonePoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_eqstruct_zone_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZonePoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_eqstruct_zone_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Weather); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_eqstruct_zone_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Time); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_eqstruct_zone_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_eqstruct_zone_proto_goTypes,
		DependencyIndexes: file_proto_eqstruct_zone_proto_depIdxs,
		MessageInfos:      file_proto_eqstruct_zone_proto_msgTypes,
	}.Build()
	File_proto_eqstruct_zone_proto = out.File
	file_proto_eqstruct_zone_proto_rawDesc = nil
	file_proto_eqstruct_zone_proto_goTypes = nil
	file_proto_eqstruct_zone_proto_depIdxs = nil
}
